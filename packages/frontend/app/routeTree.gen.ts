/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LogoutImport } from './routes/logout'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as IndexImport } from './routes/index'
import { Route as AuthedTeamImport } from './routes/_authed/team'
import { Route as AuthedSettingsImport } from './routes/_authed/settings'
import { Route as AuthedProjectsImport } from './routes/_authed/projects'
import { Route as AuthedHelpImport } from './routes/_authed/help'
import { Route as AuthedDashboardImport } from './routes/_authed/dashboard'
import { Route as AuthedCalendarImport } from './routes/_authed/calendar'
import { Route as AuthedProjectsProjectIdImport } from './routes/_authed/projects.$projectId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthedTeamRoute = AuthedTeamImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedSettingsRoute = AuthedSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProjectsRoute = AuthedProjectsImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedHelpRoute = AuthedHelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDashboardRoute = AuthedDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedCalendarRoute = AuthedCalendarImport.update({
  id: '/calendar',
  path: '/calendar',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProjectsProjectIdRoute = AuthedProjectsProjectIdImport.update({
  id: '/$projectId',
  path: '/$projectId',
  getParentRoute: () => AuthedProjectsRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/calendar': {
      id: '/_authed/calendar'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof AuthedCalendarImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/help': {
      id: '/_authed/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof AuthedHelpImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/projects': {
      id: '/_authed/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthedProjectsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/settings': {
      id: '/_authed/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedSettingsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/team': {
      id: '/_authed/team'
      path: '/team'
      fullPath: '/team'
      preLoaderRoute: typeof AuthedTeamImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/projects/$projectId': {
      id: '/_authed/projects/$projectId'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof AuthedProjectsProjectIdImport
      parentRoute: typeof AuthedProjectsImport
    }
  }
}

// Create and export the route tree

interface AuthedProjectsRouteChildren {
  AuthedProjectsProjectIdRoute: typeof AuthedProjectsProjectIdRoute
}

const AuthedProjectsRouteChildren: AuthedProjectsRouteChildren = {
  AuthedProjectsProjectIdRoute: AuthedProjectsProjectIdRoute,
}

const AuthedProjectsRouteWithChildren = AuthedProjectsRoute._addFileChildren(
  AuthedProjectsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedCalendarRoute: typeof AuthedCalendarRoute
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedHelpRoute: typeof AuthedHelpRoute
  AuthedProjectsRoute: typeof AuthedProjectsRouteWithChildren
  AuthedSettingsRoute: typeof AuthedSettingsRoute
  AuthedTeamRoute: typeof AuthedTeamRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedCalendarRoute: AuthedCalendarRoute,
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedHelpRoute: AuthedHelpRoute,
  AuthedProjectsRoute: AuthedProjectsRouteWithChildren,
  AuthedSettingsRoute: AuthedSettingsRoute,
  AuthedTeamRoute: AuthedTeamRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/calendar': typeof AuthedCalendarRoute
  '/dashboard': typeof AuthedDashboardRoute
  '/help': typeof AuthedHelpRoute
  '/projects': typeof AuthedProjectsRouteWithChildren
  '/settings': typeof AuthedSettingsRoute
  '/team': typeof AuthedTeamRoute
  '/projects/$projectId': typeof AuthedProjectsProjectIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/calendar': typeof AuthedCalendarRoute
  '/dashboard': typeof AuthedDashboardRoute
  '/help': typeof AuthedHelpRoute
  '/projects': typeof AuthedProjectsRouteWithChildren
  '/settings': typeof AuthedSettingsRoute
  '/team': typeof AuthedTeamRoute
  '/projects/$projectId': typeof AuthedProjectsProjectIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/signup': typeof SignupRoute
  '/_authed/calendar': typeof AuthedCalendarRoute
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/help': typeof AuthedHelpRoute
  '/_authed/projects': typeof AuthedProjectsRouteWithChildren
  '/_authed/settings': typeof AuthedSettingsRoute
  '/_authed/team': typeof AuthedTeamRoute
  '/_authed/projects/$projectId': typeof AuthedProjectsProjectIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/calendar'
    | '/dashboard'
    | '/help'
    | '/projects'
    | '/settings'
    | '/team'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/logout'
    | '/signup'
    | '/calendar'
    | '/dashboard'
    | '/help'
    | '/projects'
    | '/settings'
    | '/team'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/signup'
    | '/_authed/calendar'
    | '/_authed/dashboard'
    | '/_authed/help'
    | '/_authed/projects'
    | '/_authed/settings'
    | '/_authed/team'
    | '/_authed/projects/$projectId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authed",
        "/login",
        "/logout",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/calendar",
        "/_authed/dashboard",
        "/_authed/help",
        "/_authed/projects",
        "/_authed/settings",
        "/_authed/team"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/calendar": {
      "filePath": "_authed/calendar.tsx",
      "parent": "/_authed"
    },
    "/_authed/dashboard": {
      "filePath": "_authed/dashboard.tsx",
      "parent": "/_authed"
    },
    "/_authed/help": {
      "filePath": "_authed/help.tsx",
      "parent": "/_authed"
    },
    "/_authed/projects": {
      "filePath": "_authed/projects.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/projects/$projectId"
      ]
    },
    "/_authed/settings": {
      "filePath": "_authed/settings.tsx",
      "parent": "/_authed"
    },
    "/_authed/team": {
      "filePath": "_authed/team.tsx",
      "parent": "/_authed"
    },
    "/_authed/projects/$projectId": {
      "filePath": "_authed/projects.$projectId.tsx",
      "parent": "/_authed/projects"
    }
  }
}
ROUTE_MANIFEST_END */
